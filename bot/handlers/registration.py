from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from bot.keyboards.registration import get_uni_kb, main_menu_kb, get_course_kb, where_kb, get_phone_kb
from bot.utils.database import save_user_data

router = Router()

class Registration(StatesGroup):
    name = State()
    course = State()
    university = State()
    speciality = State()
    where_know = State()
    phone = State()

def is_correct_text(text):
    contains_letters = re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê]', text)
    only_symbols = re.fullmatch(r'[\W_]+', text)
    return bool(contains_letters) and not only_symbols

@router.message(F.text == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer(
        "üìù –í–≤–µ–¥–∏ –Ü–º‚Äô—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª).",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Registration.name)


@router.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not is_correct_text(name):
        await message.answer("üö´ –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    parts = name.split()
    if len(parts) != 2:
        await message.answer("üìù –í–≤–µ–¥–∏ –Ü–º‚Äô—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª). —Ç—Ä–µ–±–∞ —Ç–∞–∫ —ñ–º'—è –ø—Ä—ñ–∑–≤–∏—â–µ")
        return

    await state.update_data(name=name)
    await message.answer(
        f"–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, <b>{parts[0]}</b>!\n–û–±–µ—Ä–∏ –∫—É—Ä—Å, –Ω–∞ —è–∫–æ–º—É –Ω–∞–≤—á–∞—î—à—Å—è:",
        reply_markup=get_course_kb(),
        parse_mode="HTML"
    )
    await state.set_state(Registration.course)


@router.message(Registration.course)
async def ask_university_or_finish(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    await state.update_data(course=message.text)

    if message.text in ["üîπ –ù–µ –Ω–∞–≤—á–∞—é—Å—å", "üîπ –©–µ —É —à–∫–æ–ª—ñ/–∫–æ–ª–µ–¥–∂—ñ"]:
        data = await state.get_data()
        await save_user_data(
            user_id=message.from_user.id,
            user_name=message.from_user.username,
            name=data["name"],
            course=data["course"],
            university="–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
            speciality="–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
            team='-'
        )
        await message.answer(
            "–ß—É–¥–æ–≤–æ, —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. üéâ\n\n"
            "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –¥–æ <b>–º–µ–Ω—é</b> —ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ üîé.",
            parse_mode="HTML",
            reply_markup=main_menu_kb()
        )
        await state.clear()
    else:
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç:", reply_markup=get_uni_kb())
        await state.set_state(Registration.university)


@router.message(Registration.university)
async def ask_speciality(message: types.Message, state: FSMContext):
    text = message.text.strip()

    if text in ["üéì –Ü–Ω—à–∏–π"]:
        await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É:", reply_markup=ReplyKeyboardRemove())
        return  # –∑–∞–ª–∏—à–∞—î–º–æ —Ç–æ–π —Å–∞–º–∏–π —Å—Ç–∞–Ω (university)

    if not is_correct_text(text):
        await message.answer("‚ö†Ô∏è –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return

    await state.update_data(university=text)
    await message.answer(
        "–Ø–∫–∞ —Ç–≤–æ—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å?\n–ù–∞–ø–∏—à–∏ —ó—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ: –°–®–Ü / –Ü–ì–î–ì / –Ü–ë–Ü–° ‚Ä¶",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Registration.speciality)



@router.message(Registration.speciality)
async def ask_where(message: types.Message, state: FSMContext):
    if not is_correct_text(message.text):
        await message.answer("‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    await state.update_data(speciality=message.text)
    data = await state.get_data()

    await message.answer(
        "‚úÖ –∑–≤—ñ–¥–∫–∏ —Ç–∏ –∑–Ω–∞—î—à –Ω–∞—Å?",
        parse_mode="HTML",
        reply_markup=where_kb()
    )
    await state.set_state(Registration.where_know)
    

@router.message(Registration.where_know)
async def ask_phone(message: types.Message, state: FSMContext):
    text = message.text.strip()

    if text in ["—ñ–Ω—à–µ"]:
        await message.answer("–ù–∞–ø–∏—à–∏ –∑–≤—ñ–¥–∫–∏:", reply_markup=ReplyKeyboardRemove())
        return

    await state.update_data(where_know=message.text)

    await message.answer(
        "–î–∞–π —Å–≤—ñ–π –Ω–æ–º–µ—Ä!!!!",
        reply_markup=get_phone_kb()
    )
    await state.set_state(Registration.phone)


@router.message(Registration.phone)
async def finish_registration(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone=phone_number)

    data = await state.get_data()

    await save_user_data(
        user_id=message.from_user.id,
        user_name=message.from_user.username,
        name=data["name"],
        course=data["course"],
        university=data["university"],
        speciality=data["speciality"],
        where_know=data["where_know"],
        phone=phone_number,
        team='-'
    )

    await message.answer(
        "–ß—É–¥–æ–≤–æ, —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. üéâ\n\n"
        "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –¥–æ <b>–º–µ–Ω—é</b> —ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ üîé.",
        parse_mode="HTML",
        reply_markup=main_menu_kb()
    )
    await state.clear()

