from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile

# –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü—ñ —ñ–º–ø–æ—Ä—Ç–∏ —É –≤–∞—Å –≤–∂–µ —î —ñ –≤–æ–Ω–∏ –∫–æ—Ä–µ–∫—Ç–Ω—ñ
from bot.keyboards.cv_keyboard import get_back_cv_kb, get_cv_kb
from bot.keyboards.registration import main_menu_kb
from bot.utils.cv_db import update_cv_file_path, add_cv
from bot.utils.database import users_collection

router = Router()

# 1. –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CV
class CVStates(StatesGroup):
    waiting_for_cv_file = State()

@router.message(F.text == "CVüìú")
async def cv_start(message: types.Message, state: FSMContext):
    await state.clear() # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
    user_id = message.from_user.id
    user_data = await users_collection.find_one({"telegram_id": user_id})

    caption_text = ""
    if user_data and user_data.get("cv_file_path"):
        caption_text = "–í–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ CV, —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ?"
    else:
        caption_text = "–£ —Ü—å–æ–º—É –º–µ–Ω—é —Ç–∏ –∑–º–æ–∂–µ—à –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ CV! –í–æ–Ω–æ –º–æ–∂–µ –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤ —ñ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–≤–æ—î –∂–∏—Ç—Ç—èü§©"

    await message.answer_photo(
        photo=FSInputFile("assets/cv.png"),
        caption=caption_text,
        parse_mode="HTML",
        reply_markup=get_cv_kb()
    )

@router.message(F.text == "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—éüîô")
async def back_to_main_menu_from_cv(message: types.Message, state: FSMContext):
    await state.clear() # –í–∞–∂–ª–∏–≤–æ –æ—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é",  
        reply_markup=main_menu_kb()
    )

@router.message(F.text == "üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ—Ç–æ–≤–µ CV")
async def cv_prompt_send(message: types.Message, state: FSMContext):   
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î CV —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF –∞–±–æ DOCX.",
        reply_markup=get_back_cv_kb()
    )
    # 2. –°—Ç–∞–≤–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    await state.set_state(CVStates.waiting_for_cv_file)

# 5. –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É —ñ–º–µ–Ω. 
# –¶—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ–¥–µ –∑ –º–µ–Ω—é –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é CV.
@router.message(F.text == "–ù–∞–∑–∞–¥üîô")
async def back_to_cv_menu(message: types.Message, state: FSMContext):
    await state.clear() # –í–∏—Ö–æ–¥–∏–º–æ –∑—ñ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    await message.answer(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é CV.",
        reply_markup=get_cv_kb()
    )

# 3. –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–ø–µ—Ä —Ä–µ–∞–≥—É—î –¢–Ü–õ–¨–ö–ò —É —Å—Ç–∞–Ω—ñ waiting_for_cv_file
@router.message(CVStates.waiting_for_cv_file, F.document)
async def handle_cv_file(message: types.Message, state: FSMContext):
    if not message.document: # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        return

    file_name = message.document.file_name or ""
    mime_type = (message.document.mime_type or "").lower()
    
    # –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤
    allowed_mime_types = [
        "application/pdf", 
        "application/msword", 
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    ]
    allowed_extensions = [".pdf", ".doc", ".docx"]

    is_allowed = (mime_type in allowed_mime_types) or any(file_name.lower().endswith(ext) for ext in allowed_extensions)

    if not is_allowed:
        await message.answer("‚ùó –£–ø—Å, –¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏ PDF, DOC, DOCX. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return # –ó–∞–ª–∏—à–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É

    max_file_size = 10 * 1024 * 1024  # 10 –ú–ë
    if message.document.file_size > max_file_size:
        await message.answer("–£–ø—Å. –°—Ö–æ–∂–µ, —Ñ–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π. –ô–æ–≥–æ —Ä–æ–∑–º—ñ—Ä –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–∏–º –∑–∞ 10 –ú–ë.")
        return
    
    file_id = message.document.file_id
    user_id = message.from_user.id

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ file_id –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    await update_cv_file_path(user_id, file_id)
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è, –π–º–æ–≤—ñ—Ä–Ω–æ, —Ä–æ–±–∏—Ç—å —Ç–µ —Å–∞–º–µ, —â–æ –π –ø–æ–ø–µ—Ä–µ–¥–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –æ–¥–Ω–∞ –∑ –Ω–∏—Ö –∑–∞–π–≤–∞.
    # –Ø–∫—â–æ –≤–æ–Ω–∏ –≤–∏–∫–æ–Ω—É—é—Ç—å —Ä—ñ–∑–Ω—ñ –¥—ñ—ó, –∑–∞–ª–∏—à—Ç–µ –æ–±–∏–¥–≤—ñ.
    await add_cv(user_id=user_id, cv_file_id=file_id)
    
    await message.answer("‚úÖ CV –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! üéâ", reply_markup=main_menu_kb())
    
    # 4. –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —ñ–Ω—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É –≤ —Å—Ç–∞–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
@router.message(CVStates.waiting_for_cv_file, F.text)
async def handle_wrong_input_in_cv_state(message: types.Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ —Ñ–∞–π–ª (PDF, DOCX) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥üîô'.")


@router.message(F.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—î CV")
async def cv_check(message: types.Message):
    user_id = message.from_user.id
    user_data = await users_collection.find_one({"telegram_id": user_id})

    if user_data and user_data.get("cv_file_path"):
        await message.answer("–ó–Ω–∞–π—à–æ–≤ —Ç–≤–æ—î CV, –∑–∞—Ä–∞–∑ –Ω–∞–¥—ñ—à–ª—é...")
        cv_file_id = user_data.get("cv_file_path")
        await message.answer_document(
            document=cv_file_id,
            caption="–û—Å—å —Ç–≤–æ—î CV. –Ø–∫—â–æ —Ö–æ—á–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ, –æ–±–µ—Ä–∏ 'üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ—Ç–æ–≤–µ CV'.",
            reply_markup=get_cv_kb()
        )
    else:
        await message.answer(
            "–£–ø—Å, –∑–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ –∂–æ–¥–Ω–æ–≥–æ CV.",
            reply_markup=get_cv_kb()
        )