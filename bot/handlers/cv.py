from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from bot.keyboards.cv_keyboard import get_back_cv_kb, get_cv_kb
from bot.handlers.registration import is_correct_text
from bot.keyboards.registration import main_menu_kb
from bot.utils.cv_db import update_cv_file_path, add_cv
from bot.keyboards.team import get_have_team_kb
from bot.utils.database import is_user_in_team, users_collection
from aiogram.types import FSInputFile

router = Router()

@router.message(F.text == "CVüìú")
async def cv_start(message: types.Message):
    user_id = message.from_user.id
    user_data = await users_collection.find_one({"telegram_id": user_id})
    if user_data and user_data.get("cv_file_path") is not None:
        await message.answer_photo(
            photo=FSInputFile("assets/cv.png"),
            caption="–í–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ CV, —Ö–æ—á–µ—Ç–µ —â–µ —Ä–∞–∑ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏?",
            parse_mode="HTML",
            reply_markup=get_cv_kb()
        )
    else:
        await message.answer_photo(
            photo=FSInputFile("assets/cv.png"),
            caption="–£ —Ü—å–æ–º—É –º–µ–Ω—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ CV! –í–æ–Ω–æ –º–æ–∂–µ –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤, —â–æ –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤–∞—à–µ –∂–∏—Ç—Ç—è =)",
            parse_mode="HTML",
            reply_markup=get_cv_kb()
        )

@router.message(F.text == "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—éüîô")
async def cv_back(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é",  
        reply_markup=main_menu_kb()
    )

@router.message(F.text == "üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ—Ç–æ–≤–µ CV")
async def cv_send(message: types.Message, state: FSMContext):   
    if not is_correct_text(message.text):
        await message.answer(
            "‚ö†Ô∏è –°—Ö–æ–∂–µ, —â–æ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"
        )
        return
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î CV —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF. "
        "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –æ—Å–æ–±–∏—Å—Ç–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, "
        "—Ç–∞–∫–æ—ó —è–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–∏ –∞–¥—Ä–µ—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏.",
        reply_markup=get_back_cv_kb()
    )

@router.message(F.text == "–ù–∞–∑–∞–¥üîô")
async def cv_back(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é CV.",
        reply_markup=get_cv_kb()
    )


@router.message(F.document)
async def handle_cv_file(message: types.Message):
    file_name = message.document.file_name or ""
    mime_type = (message.document.mime_type or "").lower()

    if mime_type != "application/pdf" and not file_name.lower().endswith(".pdf"):
        await message.answer("‚ùó –£–ø—Å, –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ç—ñ–ª—å–∫–∏ PDF —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —ñ –Ω–∞–¥—ñ—à–ª–∏ PDF.")
        return

    max_file_size = 10 * 1024 * 1024  # 10 –ú–ë
    if message.document.file_size > max_file_size:
        await message.answer("–£–ø—Å. –°—Ö–æ–∂–µ, —Ñ–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π. –ô–æ–≥–æ —Ä–æ–∑–º—ñ—Ä –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–∏–º –∑–∞ 10 –ú–ë.")
        return
    
    try:
        file_id = message.document.file_id
        file = await message.bot.get_file(file_id)
        if not file.file_path:
            await message.answer("‚ùó –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return
        print(f"File ID: {file_id}, File Path: {file.file_path}")
        await message.bot.download_file(file.file_path, timeout=30)
    except Exception:
        await message.answer("üïí –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –¥—É–∂–µ –¥–æ–≤–≥–æ‚Ä¶ –ü–µ—Ä–µ–≤—ñ—Ä —Ä–æ–∑–º—ñ—Ä —ñ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")
        return
    
    user_id = message.from_user.id
    await update_cv_file_path(user_id, file_id)
    await add_cv(user_id=user_id, cv_file_id=file_id)
    await message.answer("‚úÖ CV –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! üéâ", reply_markup=get_have_team_kb())

@router.message(F.photo)
async def reject_photos(message: types.Message):
    await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ CV —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, –∞ –Ω–µ —Ñ–æ—Ç–æ üôè")
