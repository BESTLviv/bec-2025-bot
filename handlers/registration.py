from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from keyboards.registration import get_uni_kb, main_menu_kb

router = Router()

class Registration(StatesGroup):
    name = State()
    uni = State()

def is_correct_text(text):
    contains_letters = re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê]', text)
    only_symbols = re.fullmatch(r'[\W_]+', text)
    return bool(contains_letters) and not only_symbols

@router.message(F.text == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
async def start_registration(message: types.Message, state: FSMContext):
    try:
        print(f"Received: {message.text}")
        await message.answer(
            "–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Registration.name)
        print(f"State set to: Registration.name")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()

@router.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    print(f"Processing name: {message.text}")
    try:
        name = message.text.strip()
        if not is_correct_text(name):
            await message.answer("üö´ –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return

        parts = name.split()
        if len(parts) != 2:
            await message.answer("üìù –í–≤–µ–¥–∏ –Ü–º‚Äô—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª).")
            return

        await state.update_data(name=name)
        await message.answer(
            f"–ü—Ä–∏–≤—ñ—Ç, <b>{parts[0]}</b>! –û–±–µ—Ä–∏ —Å–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç:",
            reply_markup=get_uni_kb(),
            parse_mode="HTML"
        )
        await state.set_state(Registration.uni)

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
        await state.clear()

@router.message(Registration.uni)
async def finish(message: types.Message, state: FSMContext):
    print("Finishing registration")
    try:
        if message.text in ["–ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–∏", "–õ—ñ–Ω–∫–∞ –Ω–∞ –≥—Ä—É–ø—É –¥–ª—è –ø–æ—à—É–∫—É —Ç—ñ–º–∫–∏", "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞"]:
            await message.answer("‚¨ÜÔ∏è –°–ø–µ—Ä—à—É –∑–∞–≤–µ—Ä—à–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –∞ —Ç–æ–¥—ñ –º–æ–∂–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é.")
            return

        data = await state.get_data()
        name = data.get("name", "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")

        await message.answer(
            f"‚úÖ –¢–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ, <b>{name}</b>!\n–û—Å—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëá",
            parse_mode="HTML",
            reply_markup=main_menu_kb()
        )
        await state.clear()
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        await message.answer("‚ö†Ô∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...")
        await state.clear()
